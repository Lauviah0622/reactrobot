{"version":3,"sources":["../../../reactRobot/robofriends/src/serviceWorker.js","../../../reactRobot/robofriends/src/components/Card.js","../../../reactRobot/robofriends/src/components/CardList.js","../../../reactRobot/robofriends/src/components/SearchBox.js","../../../reactRobot/robofriends/src/components/Scroll.js","../../../reactRobot/robofriends/src/components/top.js","../../../reactRobot/robofriends/src/containers/App.js","../../../reactRobot/robofriends/src/index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","address","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","city","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","console","log","children","Top","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","seartchfield","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_top","components_SearchBox","components_Scroll","components_CardList","Component","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wGCFSC,EAdD,SAAAC,GAAgC,IAA9BC,EAA8BD,EAA9BC,KAAMC,EAAwBF,EAAxBE,MAAOC,EAAiBH,EAAjBG,QAASC,EAAQJ,EAARI,GAClC,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,QAAQC,IAAG,wBAAAC,OAA0BP,EAA1B,cACpBC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,UAAKN,GACLI,EAAAC,EAAAC,cAAA,SAAIL,GACJG,EAAAC,EAAAC,cAAA,0BAAkBJ,MCenBS,EAtBE,SAAAZ,GAAgB,IAAba,EAAab,EAAba,OAEhB,OACIR,EAAAC,EAAAC,cAAA,WAEQM,EAAOC,IAAI,SAACC,EAAMC,GACd,OACIX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdH,KAAMY,EAAOG,GAAGf,KAChBC,MAAOW,EAAOG,GAAGd,MACjBC,QAASU,EAAOG,GAAGb,QAAQgB,WCCxCC,EAbG,SAAApB,GAAqCA,EAAjCqB,YAAiC,IAApBC,EAAoBtB,EAApBsB,aAC/B,OACIjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,SACIgB,KAAK,SACLC,YAAY,eACZhB,UAAU,iCACViB,SAAUH,MCCXI,EATA,SAACC,GAEZ,OADAC,QAAQC,IAAIF,GAERtB,EAAAC,EAAAC,cAAA,WACKoB,EAAMG,WCKJC,EARH,SAACJ,GACT,OACItB,EAAAC,EAAAC,cAAA,WACKoB,EAAMG,WCgDJE,qBA7CX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaJI,eAAiB,SAACC,GACdR,EAAKS,SAAS,CAAEC,aAAcF,EAAMG,OAAOC,SAb3CZ,EAAKa,MAAQ,CACTjC,OAAQ,GACR8B,aAAc,IAJRV,mFAQM,IAAAc,EAAAX,KAChBY,MAAM,8CACDC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAE7B,OAAQuC,uCAQtC,IAAAC,EAC4BjB,KAAKU,MAA9BjC,EADHwC,EACGxC,OAAQ8B,EADXU,EACWV,aACVW,EAAkBzC,EAAO0C,OAAO,SAAAC,GAClC,OAAOA,EAAMvD,KAAKwD,cAAcC,SAASf,EAAac,iBAI1D,OAFA7B,QAAQC,IAAIyB,GAEPzC,EAAO8C,OAIJtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACXH,EAAAC,EAAAC,cAACqD,EAAD,KAEIvD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACsD,EAAD,CAAWvC,aAAcc,KAAKI,kBAElCnC,EAAAC,EAAAC,cAACuD,EAAD,KACIzD,EAAAC,EAAAC,cAACwD,EAAD,CAAUlD,OAAQyC,MAVvBjD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,kBA5BDwD,cCElBC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAAQC,SAASC,eAAe,SPuH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.f4be514c.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card  = ({name, email, address, id}) => {\r\n    return (\r\n        <div className='tc bg-lightest-blue dib ma2 br4 pa3 grow bw2 shadow-5'>\r\n            <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p>I'm come from {address}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    \r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => { \r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email}\r\n                            address={robots[i].address.city}\r\n                        />\r\n                    );\r\n\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\n\r\n\r\nconst SearchBox = ( { searchField, searchChange } ) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                type=\"Search\" \r\n                placeholder=\"search Robot\"\r\n                className=\"pa3 ba b--green bg-washed-blue\"\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    console.log(props)\r\n    return (\r\n        <div>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Scroll","import React from 'react'\r\n\r\n\r\nconst Top = (props) => {\r\n    return (\r\n        <div >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Top","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll'\r\nimport Top from '../components/top'\r\n// import { robots } from './robots';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            robots: [],\r\n            seartchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response => response.json() )\r\n            .then(users => this.setState({ robots: users }))\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({ seartchfield: event.target.value });\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { robots, seartchfield } = this.state\r\n        const filteredRobots =  robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(seartchfield.toLowerCase())\r\n        })\r\n        console.log(filteredRobots)\r\n\r\n        if (!robots.length) {\r\n            return <h1 className='tc'>Loading</h1>\r\n        } else {\r\n            return (\r\n                <div className='tc'>\r\n                    <Top>\r\n\r\n                        <h1 className='f1'>Robo friend</h1>\r\n                        <SearchBox searchChange={this.onSearchChange}/>\r\n                    </Top>\r\n                    <Scroll>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </Scroll>        \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\n\n//import? as? from? \n\nReactDOM.render(<App />,document.getElementById('root'));\n//使用後面那個'ROOT'的DOM來render reactDOM的<App>\n// 這樣在JS中加入html語法的語言形式稱為JSX\n/* <App /> 是react的組件，可以代入html */\n\n//document 是borwser的DOM\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}